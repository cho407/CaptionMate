name: CaptionMate Build, Test & Archive

on:
  pull_request:
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-archive-test:
    runs-on: macos-15
    env:
      CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Xcode Version
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          xcodebuild -version
          swift --version
          echo "Xcode and Swift versions verified"

      - name: Clear DerivedData
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          mkdir -p ~/Library/Developer/Xcode/DerivedData

      - name: Initialize xcodebuild
        run: |
          xcodebuild -list -project CaptionMate/CaptionMate.xcodeproj
          echo "Project structure verified"

      - name: Resolve Swift Package Dependencies
        run: |
          echo "Resolving Swift Package Manager dependencies..."
          cd CaptionMate
          xcodebuild -resolvePackageDependencies \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate"
          echo "Dependencies resolved successfully!"

          # Check resolved packages
          echo "Checking resolved packages..."
          xcodebuild -showBuildSettings \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate" | grep -i package || echo "No package settings found"

      - name: Test the CaptionMate (Unit Tests Only)
        run: |
          echo "Starting unit tests..."
          set -e

          # Run tests with detailed error output
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateTests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee test_output.log || {
              echo "Test failed, showing detailed error:"
              cat test_output.log
              exit 1
            }

      - name: UI Tests (Optional)
        continue-on-error: true
        run: |
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateUITests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

      - name: Build the CaptionMate
        run: |
          echo "Starting build process..."
          set -e

          # First, clean the build folder
          echo "Cleaning build folder..."
          xcodebuild clean \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

          # Build with detailed error output
          echo "Building project..."
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee build_output.log || {
              echo "Build failed, showing detailed error:"
              cat build_output.log
              echo "Checking specific Swift files for syntax errors..."

              # Check for common Swift syntax issues
              find CaptionMate -name "*.swift" -exec echo "Checking {}" \; -exec swift -frontend -parse {} \; 2>&1 | head -50

              exit 1
            }

          echo "Build completed successfully!"

      - name: Archive the CaptionMate
        run: |
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            archive \
            -archivePath ./CaptionMate.xcarchive \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose

          echo "Archive completed successfully!"

          # List archive contents for verification
          ls -la ./CaptionMate.xcarchive/

  # develop 브랜치일 때만 TestFlight 배포
  deploy-testflight:
    runs-on: macos-15
    needs: build-archive-test
    if: github.ref == 'refs/heads/develop'
    env:
      CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
      APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Install signing assets (p12 & provisionprofile)
        shell: bash
        run: |
          set -e
          echo "🔑 Importing signing assets..."

          # Restore files from GitHub Secrets (Base64)
          echo "Checking certificate secret..."
          if [ -z "$CERTIFICATE_BASE64" ]; then
            echo "Error: CERTIFICATE_BASE64 secret is empty or not set"
            exit 1
          fi
          echo "Certificate secret length: ${#CERTIFICATE_BASE64} characters"

          echo "Checking provisioning profile secret..."
          if [ -z "$PROVISIONING_PROFILE_BASE64" ]; then
            echo "Error: PROVISIONING_PROFILE_BASE64 secret is empty or not set"
            exit 1
          fi
          echo "Provisioning profile secret length: ${#PROVISIONING_PROFILE_BASE64} characters"

          echo "Decoding certificate..."
          if ! echo "$CERTIFICATE_BASE64" | base64 --decode > signing.p12; then
            echo "Error: Failed to decode certificate from base64"
            exit 1
          fi
          if [ ! -f signing.p12 ] || [ ! -s signing.p12 ]; then
            echo "Error: Certificate file is empty or not created"
            exit 1
          fi
          echo "Certificate decoded successfully (size: $(stat -f%z signing.p12) bytes)"

          echo "Decoding provisioning profile..."
          if ! echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > signing.provisionprofile; then
            echo "Error: Failed to decode provisioning profile from base64"
            exit 1
          fi
          if [ ! -f signing.provisionprofile ] || [ ! -s signing.provisionprofile ]; then
            echo "Error: Provisioning profile file is empty or not created"
            exit 1
          fi
          echo "Provisioning profile decoded successfully (size: $(stat -f%z signing.provisionprofile) bytes)"

          # Create and unlock a temporary keychain
          KEYCHAIN_PASS="${KEYCHAIN_PASSWORD:-}"
          security create-keychain -p "$KEYCHAIN_PASS" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASS" build.keychain
          security set-keychain-settings -lut 21600 build.keychain

          # Import the p12 certificate with broader permissions
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -A
          security list-keychains -d user -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASS" build.keychain

          # Verify the certificate was imported correctly
          echo "Available certificates:"
          security find-identity -v -p codesigning build.keychain
          echo ""
          echo "Available installer certificates:"
          security find-identity -v -p basic build.keychain

          # macOS용 프로비저닝 프로필 설치
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # Extract and verify macOS provisioning profile info
          PROVISION_INFO=$(/usr/bin/security cms -D -i signing.provisionprofile)
          UUID=$(echo "$PROVISION_INFO" | /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin)
          PLATFORM=$(echo "$PROVISION_INFO" | /usr/libexec/PlistBuddy -c 'Print :Platform' /dev/stdin 2>/dev/null || echo "Unknown")

          echo "Provisioning profile UUID: $UUID"
          echo "Platform: $PLATFORM"

          cp signing.provisionprofile "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.provisionprofile"
          echo "Installed macOS provisioning profile UUID: $UUID"

      - name: Build and Archive for TestFlight
        run: |
          echo "🚀 TestFlight 배포용 빌드 시작..."
          set -e
          # Clean build
          xcodebuild clean \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64'

          # Archive (macOS 앱 - 프로비저닝 프로필 완전 비활성화)
          xcodebuild archive \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            -archivePath ./CaptionMate.xcarchive \
            -configuration Release \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Export for TestFlight (macOS .pkg)
        run: |
          echo "📦 Exporting archive..."
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>destination</key>
            <string>export</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath ./CaptionMate.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist

          echo "Exported files:"; ls -la ./build

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: './build/CaptionMate.pkg'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: TestFlight Upload Success
        run: |
          echo "✅ TestFlight 업로드 완료!"
          echo "📱 TestFlight에서 새 빌드를 확인하세요"
          echo "🔗 App Store Connect: https://appstoreconnect.apple.com"
