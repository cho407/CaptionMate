name: CaptionMate Build, Test & Archive

on:
  pull_request:
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-archive-test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Set Xcode Version
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          xcodebuild -version
          swift --version
          echo "Xcode and Swift versions verified"

      - name: Clear DerivedData
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          mkdir -p ~/Library/Developer/Xcode/DerivedData

      - name: Initialize xcodebuild
        run: |
          xcodebuild -list -project CaptionMate/CaptionMate.xcodeproj
          echo "Project structure verified"

      - name: Resolve Swift Package Dependencies
        run: |
          echo "Resolving Swift Package Manager dependencies..."
          cd CaptionMate
          xcodebuild -resolvePackageDependencies \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate"
          echo "Dependencies resolved successfully!"

          # Check resolved packages
          echo "Checking resolved packages..."
          xcodebuild -showBuildSettings \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate" | grep -i package || echo "No package settings found"

      - name: Test the CaptionMate (Unit Tests Only)
        run: |
          echo "Starting unit tests..."
          set -e

          # Run tests with detailed error output
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateTests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee test_output.log || {
              echo "Test failed, showing detailed error:"
              cat test_output.log
              exit 1
            }

      - name: UI Tests (Optional)
        continue-on-error: true
        run: |
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateUITests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

      - name: Build the CaptionMate
        run: |
          echo "Starting build process..."
          set -e

          # First, clean the build folder
          echo "Cleaning build folder..."
          xcodebuild clean \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

          # Build with detailed error output
          echo "Building project..."
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee build_output.log || {
              echo "Build failed, showing detailed error:"
              cat build_output.log
              echo "Checking specific Swift files for syntax errors..."

              # Check for common Swift syntax issues
              find CaptionMate -name "*.swift" -exec echo "Checking {}" \; -exec swift -frontend -parse {} \; 2>&1 | head -50

              exit 1
            }

          echo "Build completed successfully!"

      - name: Archive the CaptionMate
        run: |
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            archive \
            -archivePath ./CaptionMate.xcarchive \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose

          echo "Archive completed successfully!"

          # List archive contents for verification
          ls -la ./CaptionMate.xcarchive/

  # develop 브랜치일 때만 TestFlight 배포
  deploy-testflight:
    runs-on: macos-15
    needs: build-archive-test
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Import Code Signing Certificate
        run: |
          echo "🔐 코드 서명 인증서 가져오기..."

          # Create temporary directory
          mkdir -p /tmp/certs

          # Decode certificate from base64
          echo "${{ secrets.CERTIFICATE_BASE64 }}" | base64 --decode > /tmp/certs/certificate.p12

          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          # Import certificate
          security import /tmp/certs/certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign

          # Set partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

          # Verify certificate
          security find-identity -v -p codesigning build.keychain

      - name: Import Provisioning Profile
        run: |
          echo "📋 프로비저닝 프로필 가져오기..."

          # Create directory for provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Decode provisioning profile from base64
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

          # Verify provisioning profile
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build and Archive for TestFlight
        run: |
          echo "🚀 TestFlight 배포용 빌드 시작..."
          # Clean build
          xcodebuild clean \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64'

          # Archive for TestFlight (직접 주입된 인증서 사용)
          xcodebuild archive \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            -archivePath ./CaptionMate.xcarchive \
            -configuration Release \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="profile"

      - name: Export IPA for TestFlight
        run: |
          echo "📦 IPA 파일 생성 중..."

          # ExportOptions.plist 생성
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

          # Export IPA
          xcodebuild -exportArchive \
            -archivePath ./CaptionMate.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: './build/CaptionMate.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: TestFlight Upload Success
        run: |
          echo "✅ TestFlight 업로드 완료!"
          echo "📱 TestFlight에서 새 빌드를 확인하세요"
          echo "🔗 App Store Connect: https://appstoreconnect.apple.com"
