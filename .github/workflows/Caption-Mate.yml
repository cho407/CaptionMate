name: CaptionMate Build, Test & Archive

on:
  pull_request:
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-archive-test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Set Xcode Version
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          xcodebuild -version
          swift --version
          echo "Xcode and Swift versions verified"

      - name: Clear DerivedData
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          mkdir -p ~/Library/Developer/Xcode/DerivedData

      - name: Initialize xcodebuild
        run: |
          xcodebuild -list -project CaptionMate/CaptionMate.xcodeproj
          echo "Project structure verified"

      - name: Resolve Swift Package Dependencies
        run: |
          echo "Resolving Swift Package Manager dependencies..."
          cd CaptionMate
          xcodebuild -resolvePackageDependencies \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate"
          echo "Dependencies resolved successfully!"

          # Check resolved packages
          echo "Checking resolved packages..."
          xcodebuild -showBuildSettings \
            -project CaptionMate.xcodeproj \
            -scheme "CaptionMate" | grep -i package || echo "No package settings found"

      - name: Test the CaptionMate (Unit Tests Only)
        run: |
          echo "Starting unit tests..."
          set -e

          # Run tests with detailed error output
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateTests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee test_output.log || {
              echo "Test failed, showing detailed error:"
              cat test_output.log
              exit 1
            }

      - name: UI Tests (Optional)
        continue-on-error: true
        run: |
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test \
            -only-testing:CaptionMateUITests \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

      - name: Build the CaptionMate
        run: |
          echo "Starting build process..."
          set -e

          # First, clean the build folder
          echo "Cleaning build folder..."
          xcodebuild clean \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY=""

          # Build with detailed error output
          echo "Building project..."
          xcodebuild \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme "CaptionMate" \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            -verbose 2>&1 | tee build_output.log || {
              echo "Build failed, showing detailed error:"
              cat build_output.log
              echo "Checking specific Swift files for syntax errors..."

              # Check for common Swift syntax issues
              find CaptionMate -name "*.swift" -exec echo "Checking {}" \; -exec swift -frontend -parse {} \; 2>&1 | head -50

              exit 1
            }

          echo "Build completed successfully!"

  # develop 브랜치일 때만 TestFlight 배포
  deploy-testflight:
    runs-on: macos-15
    needs: build-archive-test
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Import Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain

          # Import certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # 인증서 설치 확인
          echo "=== 인증서 설치 확인 ==="
          security find-identity -v -p codesigning build.keychain || echo "No identities found"
          
          # 인증서 상세 정보 확인
          echo "=== 인증서 상세 정보 ==="
          security find-identity -v build.keychain | grep -E "(Mac App Distribution|Apple Distribution|Developer)" || echo "No relevant certificates found"

      - name: Import Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.provisionprofile
          
          # macOS용 프로비저닝 프로필 경로 (두 경로 모두 생성)
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$HOME/Library/Developer/Xcode/Provisioning Profiles"
          
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(/usr/bin/security cms -D -i profile.provisionprofile)")
          
          # 두 경로 모두에 복사
          cp profile.provisionprofile "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.provisionprofile"
          cp profile.provisionprofile "$HOME/Library/Developer/Xcode/Provisioning Profiles/$UUID.provisionprofile"
          
          # 프로비저닝 프로필 정보 출력 (디버깅용)
          echo "Provisioning Profile UUID: $UUID"
          echo "Profile contents:"
          /usr/bin/security cms -D -i profile.provisionprofile | grep -A 5 -B 5 "com.cho407.CaptionMate" || echo "Bundle ID not found in profile"
          
          echo "Profile installed to:"
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.provisionprofile" || echo "MobileDevice path failed"
          ls -la "$HOME/Library/Developer/Xcode/Provisioning Profiles/$UUID.provisionprofile" || echo "Xcode path failed"
          
          echo "PROVISIONING_PROFILE_UUID=$UUID" >> $GITHUB_ENV

      - name: Build and Archive for TestFlight
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "🚀 TestFlight 배포용 빌드 시작..."
          
          # 인증서 및 프로비저닝 프로필 확인
          echo "=== 인증서 확인 ==="
          security find-identity -v -p codesigning build.keychain || echo "No code signing identities found"
          
          echo "=== 프로비저닝 프로필 확인 ==="
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || echo "No provisioning profiles found"
          
          # 프로젝트 설정 확인
          echo "=== 프로젝트 설정 확인 ==="
          xcodebuild -showBuildSettings \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -configuration Release | grep -E "(PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_IDENTITY)" || echo "No relevant settings found"
          
          # 아카이브 빌드 (상세 로그 포함)
          echo "=== 아카이브 빌드 시작 ==="
          xcodebuild archive \
            -project CaptionMate/CaptionMate.xcodeproj \
            -scheme CaptionMate \
            -destination 'platform=macOS,arch=arm64' \
            -archivePath CaptionMate.xcarchive \
            -configuration Release \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Mac App Distribution" \
            CODE_SIGN_IDENTITY_FOR_SWIFT_PACKAGES="Apple Development" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_UUID" \
            PROVISIONING_PROFILE_SPECIFIER_FOR_SWIFT_PACKAGES="Automatic" \
            OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/build.keychain" \
            -verbose 2>&1 | tee archive_output.log || {
              echo "=== 아카이브 실패 - 상세 에러 ==="
              cat archive_output.log
              
              echo "=== 키체인 상태 확인 ==="
              security list-keychains
              security find-identity -v build.keychain || echo "No identities in build.keychain"
              
              echo "=== 프로비저닝 프로필 확인 ==="
              ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || echo "No provisioning profiles directory"
              
              exit 1
            }
          
          echo "=== 아카이브 성공 ==="
          ls -la CaptionMate.xcarchive

      - name: Create Export Options Plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "📝 Creating Export Options Plist..."
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.cho407.CaptionMate</key>
              <string>$PROVISIONING_PROFILE_UUID</string>
            </dict>
            <key>signingCertificate</key>
            <string>Mac App Distribution</string>
          </dict>
          </plist>
          EOF
          
          echo "Export Options Plist created:"
          cat ExportOptions.plist
          
          # 파일 권한 확인
          ls -la ExportOptions.plist

      - name: Export Archive
        run: |
          echo "📦 Exporting archive..."
          xcodebuild -exportArchive \
            -archivePath CaptionMate.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist \
            -verbose 2>&1 | tee export_output.log || {
              echo "Export failed, showing detailed error:"
              cat export_output.log
              exit 1
            }

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: './build/CaptionMate.pkg'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
